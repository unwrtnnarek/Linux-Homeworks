#include <iostream>
#include <vector>
#include <random>
#include <thread>
#include <chrono>


using namespace std;

void part_sum(const vector<int>& arr, size_t start, size_t end, long long& result) {
        long long sum = 0;
        for(int i = start; i < end; i++) {
                sum += arr[i];
        }
        result = sum;
}

int main(int argc, char* argv[]){
        if (argc < 3) {
                cerr << "usage: " << argv[0] << " <N> <M>\n";
                return 1;
        }
        size_t N = stoull(argv[1]);
        size_t M = stoull(argv[2]);


        vector<int> arr(N);
        mt19937 gen(random_device{}());
        uniform_int_distribution<> dist(0, 100);

        for(size_t i = 0; i < N; i++) {
                arr[i] = dist(gen);
        }

        auto nt_st = chrono::high_resolution_clock::now();

        long long tot_noth = 0;
        for(size_t i = 0; i < N; i++) {
                tot_noth += arr[i];
        }

        auto nt_end = chrono::high_resolution_clock::now();
        chrono::duration<double> t1 = nt_end - nt_st;
 auto th_start = chrono::high_resolution_clock::now();

        vector<thread> threads;

        vector<long long> pres(M, 0);

        size_t chunk_size = N / M;

        for(size_t i = 0; i < M; i++) {
                size_t start = i * chunk_size;
                size_t end = (i == M-1) ? N : start + chunk_size;
                try{
                threads.emplace_back(part_sum, cref(arr), start, end , ref(pres[i]));
                }catch (const system_error& e) {
                        cerr << "Failed";
                }
        }
        for(auto & t : threads)
                try {
                        t.join();
                }catch (const system_error& e) {
                        cerr << "Failed";
                }

        long long t_total = 0;
        for(auto val : pres) {
                t_total += val;
        }

        auto th_end = chrono::high_resolution_clock::now();
        chrono::duration<double> t2 = th_end - th_start;

        cout<< "without threads time: " << t1.count() << "sec\n";
        cout<< "with threads time: "    << t2.count() << "sec\n";

        if(t_total != tot_noth) {
                cerr << "Warning: sums dont match";
        }
}

